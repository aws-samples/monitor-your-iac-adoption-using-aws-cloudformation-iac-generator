# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

# This file is named cdk_constants.py to avoid conflict with the runtime constants file.

import itertools
import os

import aws_cdk as cdk

ENVIRONMENT = cdk.Environment(
    account=os.environ["CDK_DEFAULT_ACCOUNT"],
    region=os.environ["CDK_DEFAULT_REGION"],
)


RESOURCE_TYPE_FOCUS_LIST = [
    "AWS::EC2::Instance",
    "AWS::Lambda::Function",
    "AWS::S3::Bucket",
    "AWS::RDS::DBCluster",
]

RESOURCE_TYPE_EXCLUDE_LIST = [
    "AWS::Logs::LogStream",
    "AWS::Logs::LogGroup",
    "AWS::IAM::ManagedPolicy",
]

RESOURCE_TYPE_DELIMETER = "::"

CLOUDWATCH_METRICS_NAMESPACE = "IacAdoption"

IAM_READ_ONLY_ACTION_PREFIXES = ["Get", "Describe", "List"]
# Taken from https://awspolicygen.s3.amazonaws.com/js/policies.js
IAM_ALL_NAMESPACES = [
    "a2c",
    "a4b",
    "access-analyzer",
    "account",
    "acm-pca",
    "acm",
    "activate",
    "airflow",
    "amplify",
    "amplifybackend",
    "amplifyuibuilder",
    "aoss",
    "apigateway",
    "app-integrations",
    "appconfig",
    "appfabric",
    "appflow",
    "application-autoscaling",
    "application-cost-profiler",
    "application-transformation",
    "applicationinsights",
    "appmesh-preview",
    "appmesh",
    "apprunner",
    "appstream",
    "appsync",
    "aps",
    "arc-zonal-shift",
    "arsenal",
    "artifact",
    "athena",
    "auditmanager",
    "autoscaling-plans",
    "autoscaling",
    "aws-marketplace-management",
    "aws-marketplace",
    "aws-portal",
    "awsconnector",
    "b2bi",
    "backup-gateway",
    "backup-storage",
    "backup",
    "batch",
    "bcm-data-exports",
    "bedrock",
    "billing",
    "billingconductor",
    "braket",
    "budgets",
    "bugbust",
    "cases",
    "cassandra",
    "ce",
    "chatbot",
    "chime",
    "cleanrooms-ml",
    "cleanrooms",
    "cloud9",
    "clouddirectory",
    "cloudformation",
    "cloudfront-keyvaluestore",
    "cloudfront",
    "cloudhsm",
    "cloudsearch",
    "cloudshell",
    "cloudtrail-data",
    "cloudtrail",
    "cloudwatch",
    "codeartifact",
    "codebuild",
    "codecatalyst",
    "codecommit",
    "codedeploy-commands-secure",
    "codedeploy",
    "codeguru-profiler",
    "codeguru-reviewer",
    "codeguru-security",
    "codeguru",
    "codepipeline",
    "codestar-connections",
    "codestar-notifications",
    "codestar",
    "codewhisperer",
    "cognito-identity",
    "cognito-idp",
    "cognito-sync",
    "comprehend",
    "comprehendmedical",
    "compute-optimizer",
    "config",
    "connect-campaigns",
    "connect",
    "consoleapp",
    "consolidatedbilling",
    "controltower",
    "cost-optimization-hub",
    "cur",
    "customer-verification",
    "databrew",
    "dataexchange",
    "datapipeline",
    "datasync",
    "datazone",
    "dax",
    "dbqms",
    "deepcomposer",
    "deeplens",
    "deepracer",
    "detective",
    "devicefarm",
    "devops-guru",
    "directconnect",
    "discovery",
    "dlm",
    "dms",
    "docdb-elastic",
    "drs",
    "ds",
    "dynamodb",
    "ebs",
    "ec2-instance-connect",
    "ec2",
    "ec2messages",
    "ecr-public",
    "ecr",
    "ecs",
    "eks-auth",
    "eks",
    "elastic-inference",
    "elasticache",
    "elasticbeanstalk",
    "elasticfilesystem",
    "elasticloadbalancing",
    "elasticmapreduce",
    "elastictranscoder",
    "elemental-activations",
    "elemental-appliances-software",
    "elemental-support-cases",
    "elemental-support-content",
    "emr-containers",
    "emr-serverless",
    "entityresolution",
    "es",
    "events",
    "evidently",
    "execute-api",
    "finspace-api",
    "finspace",
    "firehose",
    "fis",
    "fms",
    "forecast",
    "frauddetector",
    "freertos",
    "freetier",
    "fsx",
    "gamelift",
    "geo",
    "glacier",
    "globalaccelerator",
    "glue",
    "grafana",
    "greengrass",
    "groundstation",
    "groundtruthlabeling",
    "guardduty",
    "health",
    "healthlake",
    "honeycode",
    "iam",
    "identity-sync",
    "identitystore-auth",
    "identitystore",
    "imagebuilder",
    "importexport",
    "inspector-scan",
    "inspector2",
    "inspector",
    "internetmonitor",
    "invoicing",
    "iot-device-tester",
    "iot1click",
    "iot",
    "iotanalytics",
    "iotdeviceadvisor",
    "iotevents",
    "iotfleethub",
    "iotfleetwise",
    "iotjobsdata",
    "iotroborunner",
    "iotsitewise",
    "iottwinmaker",
    "iotwireless",
    "iq-permission",
    "iq",
    "ivs",
    "ivschat",
    "kafka-cluster",
    "kafka",
    "kafkaconnect",
    "kendra-ranking",
    "kendra",
    "kinesis",
    "kinesisanalytics",
    "kinesisvideo",
    "kms",
    "lakeformation",
    "lambda",
    "launchwizard",
    "lex",
    "license-manager-linux-subscriptions",
    "license-manager-user-subscriptions",
    "license-manager",
    "lightsail",
    "logs",
    "lookoutequipment",
    "lookoutmetrics",
    "lookoutvision",
    "m2",
    "machinelearning",
    "macie2",
    "managedblockchain-query",
    "managedblockchain",
    "mapcredits",
    "marketplacecommerceanalytics",
    "mechanicalturk",
    "mediaconnect",
    "mediaconvert",
    "mediaimport",
    "medialive",
    "mediapackage-vod",
    "mediapackage",
    "mediapackagev2",
    "mediastore",
    "mediatailor",
    "medical-imaging",
    "memorydb",
    "mgh",
    "mgn",
    "migrationhub-orchestrator",
    "migrationhub-strategy",
    "mobileanalytics",
    "mobiletargeting",
    "monitron",
    "mq",
    "neptune-db",
    "neptune-graph",
    "network-firewall",
    "networkmanager-chat",
    "networkmanager",
    "networkmonitor",
    "nimble",
    "notifications-contacts",
    "notifications",
    "oam",
    "omics",
    "one",
    "opsworks-cm",
    "opsworks",
    "organizations",
    "osis",
    "outposts",
    "panorama",
    "partnercentral-account-management",
    "payment-cryptography",
    "payments",
    "pca-connector-ad",
    "personalize",
    "pi",
    "pipes",
    "polly",
    "pricing",
    "private-networks",
    "profile",
    "proton",
    "purchase-orders",
    "q",
    "qbusiness",
    "qldb",
    "quicksight",
    "ram",
    "rbin",
    "rds-data",
    "rds-db",
    "rds",
    "redshift-data",
    "redshift-serverless",
    "redshift",
    "refactor-spaces",
    "rekognition",
    "repostspace",
    "resiliencehub",
    "resource-explorer-2",
    "resource-explorer",
    "resource-groups",
    "rhelkb",
    "robomaker",
    "rolesanywhere",
    "route53-recovery-cluster",
    "route53-recovery-control-config",
    "route53-recovery-readiness",
    "route53",
    "route53domains",
    "route53resolver",
    "rum",
    "s3-object-lambda",
    "s3-outposts",
    "s3",
    "s3express",
    "sagemaker-geospatial",
    "sagemaker-groundtruth-synthetic",
    "sagemaker",
    "savingsplans",
    "scheduler",
    "schemas",
    "scn",
    "sdb",
    "secretsmanager",
    "securityhub",
    "securitylake",
    "serverlessrepo",
    "servicecatalog",
    "servicediscovery",
    "serviceextract",
    "servicequotas",
    "ses",
    "shield",
    "signer",
    "simspaceweaver",
    "sms-voice",
    "sms",
    "snow-device-management",
    "snowball",
    "sns",
    "sqlworkbench",
    "sqs",
    "ssm-contacts",
    "ssm-guiconnect",
    "ssm-incidents",
    "ssm-sap",
    "ssm",
    "ssmmessages",
    "sso-directory",
    "sso-oauth",
    "sso",
    "states",
    "storagegateway",
    "sts",
    "support",
    "supportapp",
    "supportplans",
    "sustainability",
    "swf",
    "synthetics",
    "tag",
    "tax",
    "textract",
    "thinclient",
    "timestream-influxdb",
    "timestream",
    "tiros",
    "tnb",
    "transcribe",
    "transfer",
    "translate",
    "trustedadvisor",
    "ts",
    "vendor-insights",
    "verified-access",
    "verifiedpermissions",
    "voiceid",
    "vpc-lattice-svcs",
    "vpc-lattice",
    "waf-regional",
    "waf",
    "wafv2",
    "wam",
    "wellarchitected",
    "wickr",
    "wisdom",
    "workdocs",
    "worklink",
    "workmail",
    "workmailmessageflow",
    "workspaces-web",
    "workspaces",
    "xray",
]

IAM_ALL_READ_ONLY_ACTIONS = [
    f"{namespace}:{action_prefix}*"
    for namespace, action_prefix in itertools.product(IAM_ALL_NAMESPACES, IAM_READ_ONLY_ACTION_PREFIXES)
]
